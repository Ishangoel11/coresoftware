AUTOMAKE_OPTIONS = foreign

bin_PROGRAMS = \
  CaloCDB-GenStatus \
  CaloCDB-FilterDatasets

AM_CPPFLAGS = \
  -I$(includedir) \
  -I$(OFFLINE_MAIN)/include \
  -isystem$(ROOTSYS)/include

AM_LDFLAGS = \
  -L$(libdir) \
  -L$(OFFLINE_MAIN)/lib \
  -L$(OFFLINE_MAIN)/lib64 \
   `root-config --libs`

pkginclude_HEADERS = \
	genStatus.h \
	filter-datasets.h \
  geometry_constants.h \
  myUtils.h

lib_LTLIBRARIES = \
  libcalo_cdb.la

libcalo_cdb_la_SOURCES = \
	genStatus.cc \
  filter-datasets.cc \
	myUtils.cc

libcalo_cdb_la_LIBADD = \
  -lphool \
  -lSubsysReco \
  -lcalo_io \
  -lcdbobjects \
  -lsphenixnpc \
  -lemcNoisyTowerFinder

CaloCDB_GenStatus_SOURCES = CaloCDB-GenStatus.cc
# CaloCDB_GenStatus_CXXFLAGS = -fsanitize=address
CaloCDB_GenStatus_LDADD = libcalo_cdb.la

CaloCDB_FilterDatasets_SOURCES = CaloCDB-FilterDatasets.cc
# CaloCDB_FilterDatasets_CXXFLAGS = -fsanitize=address
CaloCDB_FilterDatasets_LDADD = libcalo_cdb.la

BUILT_SOURCES = testexternals.cc

noinst_PROGRAMS = \
  testexternals

testexternals_SOURCES = testexternals.cc
testexternals_LDADD   = libcalo_cdb.la

# --- Cppcheck Integration ---

# Define the output files for Cppcheck
CPPCHECK_REPORT_TXT = cppcheck_report.txt

# Define the Cppcheck command, using variables for flags
# Use AM_CPPFLAGS as the source of include paths for cppcheck
CPPCHECK_CMD = cppcheck \
  --std=c++20 \
  --enable=all \
  --suppress=missingIncludeSystem \
  --suppress=missingInclude \
  --suppress=unusedFunction \
  --force \
  --check-level=exhaustive \
  -j $(shell nproc) \
  $(AM_CPPFLAGS) \
  --output-file=$(CPPCHECK_REPORT_TXT) \
  $(srcdir) # Analyze the current source directory

# 1. Option A: Add to 'check-local' (part of 'make check')
#    This makes Cppcheck run when the user types 'make check'
check-local: $(CPPCHECK_REPORT_TXT)
	@echo "Running Cppcheck as part of 'make check'..."
	$(CPPCHECK_CMD) || { \
	  echo "Cppcheck found issues! See $(CPPCHECK_REPORT_TXT)"; \
	  exit 1; \
	}
	@echo "Cppcheck finished. See $(CPPCHECK_REPORT_TXT)"

# Rule to ensure the report files are generated by the above command
$(CPPCHECK_REPORT_TXT): $(bin_PROGRAMS_SOURCES) # Depend on all your source files
	$(CPPCHECK_CMD)

# 2. Option B: Create a separate custom target (e.g., 'make cppcheck-analysis')
#    This allows users to run Cppcheck explicitly.
.PHONY: cppcheck-analysis
cppcheck-analysis: $(CPPCHECK_REPORT_TXT)
	@echo "Running Cppcheck analysis..."
	$(CPPCHECK_CMD) || { \
	  echo "Cppcheck found issues! See $(CPPCHECK_REPORT_TXT)"; \
	  exit 1; \
	}
	@echo "Cppcheck finished. See $(CPPCHECK_REPORT_TXT)"

# Add the generated files to EXTRA_DIST so they are cleaned by 'make distclean'
# (If you don't use 'make distclean', you can omit this.)
EXTRA_DIST = $(CPPCHECK_REPORT_TXT)

# Add files to CLEANFILES so they are removed by 'make clean'
CLEANFILES = $(CPPCHECK_REPORT_TXT)

testexternals.cc:
	echo "//*** this is a generated file. Do not commit, do not edit" > $@
	echo "int main()" >> $@
	echo "{" >> $@
	echo "  return 0;" >> $@
	echo "}" >> $@

clean-local:
	rm -f $(BUILT_SOURCES)
